<?phpinclude_once TEMPLATE_PATH.'/site/helper/format.php';$project = $SOUP->get('project');$banned = $SOUP->get('banned');$numBanned = count($banned);// only organizers or creator may ban/unban users$hasPermission = ( Session::isAdmin() ||					$project->isTrusted(Session::getUserID()) ||					$project->isCreator(Session::getUserID()) );$fork = $SOUP->fork();$fork->set('id', 'banned');$fork->set('title', 'Banned ('.$numBanned.')');$fork->set('creatable', $hasPermission);$fork->set('createLabel', 'Ban Users');// $fork->set('editable', $hasPermission);// $fork->set('editLabel', 'Edit Banned');$fork->startBlockSet('body');?><?php if($hasPermission): ?><script type="text/javascript">$(document).ready(function(){	$("#banned input.unban").click(function(){		var id = $(this).attr('id').substring(6); // 'unban-'		buildPost({			'processPage': '<?= Url::peopleProcess($project->getID()) ?>',			'info': {				'action': 'unban',				'userID': id			},			'buttonID': $(this)		});	});			$("#banned .createButton").click(function(){		$(this).hide();		$("#banned .view").hide();		$("#banned .newBan").fadeIn();		$('#txtNewBan').focus();				});		$("#btnCancelBan").click(function(){		$("#banned .newBan").hide();		$("#banned .view").fadeIn();		$("#banned .createButton").fadeIn();	});		$( "#txtNewBan" )		// don't navigate away from the field on tab when selecting an item		.bind( "keydown", function( event ) {			if ( event.keyCode === $.ui.keyCode.TAB &&					$( this ).data( "autocomplete" ).menu.active ) {				event.preventDefault();			}		})		.autocomplete({			source: function( request, response ) {				$.getJSON( '<?= Url::peopleSearch($project->getID()) ?>/bannable', {					term: extractLast( request.term )				}, response );			},			search: function() {				// custom minLength				var term = extractLast( this.value );				if ( term.length < 2 ) {					return false;				}			},			focus: function() {				// prevent value inserted on focus				return false;			},			select: function( event, ui ) {				var terms = split( this.value );				// remove the current input				terms.pop();				// add the selected item				terms.push( ui.item.value );				// add placeholder to get the comma-and-space at the end				terms.push( "" );				this.value = terms.join( ", " );				return false;			}		});			$('#btnNewBan').click(function() {		buildPost({			'processPage': '<?= Url::peopleProcess($project->getID()) ?>',			'info': {				'action': 'ban-users',				'banlist': $('#txtNewBan').val()			},			'buttonID': '#btnNewBan'		});	});	});</script><div class="newBan hidden">	<div class="clear">		<label for="txtNewBan">People to Ban<span class="required">*</span></label>		<div class="input">			<input type="text" id="txtNewBan" />			<p>Usernames separated by commas</p>		</div>	</div>	<div class="clear">		<div class="input">			<input type="button" id="btnNewBan" value="Ban" />			<input type="button" id="btnCancelBan" value="Cancel" />		</div>	</div></div><?php endif; ?><div class="view"><ul class="segmented-list users"><?php if(empty($banned)) {	echo '<li class="none">(none)</li>';} else {	foreach($banned as $b) {		echo '<li>';		if($hasPermission) {			echo '<input id="unban-'.$b->getID().'" type="button" class="unban" value="Unban" />';		}		echo formatUserPicture($b->getID(), 'small');		echo '<h6 class="primary">'.formatUserLink($b->getID()).'</h6>';		echo '<p class="secondary">banned</p>';		echo '</li>';	}	echo '</ul>';} ?></ul></div><?php$fork->endBlockSet();$fork->render('site/partial/panel');