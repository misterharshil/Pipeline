<?phpclass Message extends DbObject{	protected $id;	protected $senderID;	protected $recipientID;	protected $parentID;	protected $subject;	protected $body;	protected $dateSent;	protected $dateRead;		const DB_TABLE = 'message';	public function __construct($args = array())	{		$defaultArgs = array(			'id' => null,			'sender_id' => 0,			'recipient_id' => 0,			'parent_id' => 0,			'subject' => '',			'body' => '',			'date_sent' => '',			'date_read' => null		);		$args += $defaultArgs;		$this->id = $args['id'];		$this->senderID = $args['sender_id'];		$this->recipientID = $args['recipient_id'];		$this->parentID = $args['parent_id'];		$this->subject = $args['subject'];		$this->body = $args['body'];		$this->dateSent = $args['date_sent'];		$this->dateRead = $args['date_read'];	}		public static function load($id)	{		$db = Db::instance();		$obj = $db->fetch($id, __CLASS__, self::DB_TABLE);		return $obj;	}	public function save()	{		$db = Db::instance();		// map database fields to class properties; omit id and dateTimeCreated		$db_properties = array(			'sender_id' => $this->senderID,			'recipient_id' => $this->recipientID,			'parent_id' => $this->parentID,			'subject' => $this->subject,			'body' => $this->body,			'date_sent' => $this->dateSent,			'date_read' => $this->dateRead		);				$db->store($this, __CLASS__, self::DB_TABLE, $db_properties);	}		/* returns an array of messages with any replies to this message */	public function getReplies($limit=null)	{		$query = " SELECT id FROM ".self::DB_TABLE;		$query .= " WHERE parent_id = ".$this->id;		$query .= " ORDER BY date_sent ASC";		if($limit!=null)			$query .= " LIMIT ".$limit;			//echo $query;		$db = Db::instance();		$result = $db->lookup($query);				if (!mysql_num_rows($result)) {return null;}				$messages = array();		while ($row = mysql_fetch_assoc($result))			$messages[$row['id']] = self::load($row['id']);				return $messages;		}		// /* returns the number of replies to this message */	// public function getNumReplies()	// {		// return (count($this->getReplies()));	// }		// /* returns true if this message or any of its replies are unread by this user */	// public function hasUnread()	// {		// // is this message unread?		// if( ($this->getDateTimeRead() == null) && ($this->getRecipientID() == Session::getUserID()) )		// {			// return true;		// }				// // are any of its replies unread?		// $replies = $this->getReplies();		// if($replies != null)		// {			// foreach($replies as $reply)			// {				// if( ($reply->getDateTimeRead() == null) && ($reply->getRecipientID() == Session::getUserID()) )				// {					// return true;				// }			// }		// }						// // must be all read		// return false;	// }		/* mark this message and any of its replies as read, if the user *can* read them */	public function markAllRead()	{		$dateRead = date("Y-m-d H:i:s"); // get it once for consistency				// mark replies as read		$replies = $this->getReplies();		if(!empty($replies)) {			foreach($replies as $reply) {				if( ($reply->getDateRead() == null)					&& ($reply->getRecipientID() == Session::getUserID()) ) {					$reply->setDateRead($dateRead);					$reply->save();				}			}		}	}		/* static methods */		public static function getReceivedMessagesByUserID($userID=null, $limit=null, $unread=null)	{		if($userID === null) return null;				$query = " SELECT id FROM ".self::DB_TABLE;		$query .= " WHERE recipient_id = ".$userID;		if($unread === true)			$query .= " AND date_read IS NULL";		elseif($unread === false)			$query .= " AND date_time_read IS NOT NULL";		$query .= " ORDER BY ISNULL(date_read) DESC, date_sent DESC";		if($limit!=null)			$query .= " LIMIT ".$limit;			//echo $query.'<br>';		$db = Db::instance();		$result = $db->lookup($query);				if (!mysql_num_rows($result)) {return null;}				$messages = array();		while ($row = mysql_fetch_assoc($result))			$messages[$row['id']] = self::load($row['id']);				return $messages;		}	// getters and setters	public function getID()	{		return ($this->id);	}		public function setID($newID)	{		$this->id = $newID;		$this->modified = true;	}		public function getSenderID()	{		return ($this->senderID);	}		public function getSender()	{		return (User::load($this->senderID));	}		public function setSenderID($newSenderID)	{		$this->senderID = $newSenderID;		$this->modified = true;	}		public function getRecipientID()	{		return ($this->recipientID);	}		public function getRecipient()	{		return (User::load($this->recipientID));	}		public function setRecipientID($newRecipientID)	{		$this->recipientID = $newRecipientID;		$this->modified = true;	}		public function getParentID()	{		return ($this->parentID);	}		public function setParentID($newParentID)	{		$this->parentID = $newParentID;		$this->modified = true;	}		public function getSubject()	{		return ($this->subject);	}		public function setSubject($newSubject)	{		$this->subject = $newSubject;		$this->modified = true;	}		public function getBody()	{		return ($this->body);	}		public function setBody($newBody)	{		$this->body = $newBody;		$this->modified = true;	}		public function getDateSent()	{		return ($this->dateSent);	}		public function setDateSent($newDateSent)	{		$this->dateSent = $newDateSent;		$this->modified = true;	}		public function getDateRead()	{		return ($this->dateRead);	}		public function setDateRead($newDateRead)	{		$this->dateRead = $newDateRead;		$this->modified = true;	}}