<?phprequire_once("../../global.php");$slug = Filter::text($_GET['slug']);$filter = Filter::text($_GET['filter']);$project = Project::getProjectFromSlug($slug);// kick us out if slug invalidif($project == null){	header('Location: '.Url::error());	exit();}// if private project, limit access to invited users, members, and admins// and exclude banned membersif($project->getPrivate()) {	if (!Session::isAdmin() && (!$project->isCreator(Session::getUserID()))) {		if (((!$project->isInvited(Session::getUserID())) && (!$project->isMember(Session::getUserID())) &&		(!$project->isTrusted(Session::getUserID()))) || ProjectUser::isBanned(Session::getUserID(),$project->getID())) {		 	header('Location: '.Url::error());			exit();				}	}}$projectID = $project->getID();// page number, if anyif(empty($_GET['page']))	$page = 1;else	$page = Filter::numeric($_GET['page']);define('EVENTS_PER_PAGE', 10); // how many events per pageswitch($filter){	case "basics":		$totalNumEvents = count(Event::getBasicsEventsByProjectID($projectID));		break;	case "tasks":		$totalNumEvents = count(Event::getTasksEventsByProjectID($projectID));		break;	case "discussions":		$totalNumEvents = count(Event::getDiscussionsEventsByProjectID($projectID));		break;	case "people":		$totalNumEvents = count(Event::getPeopleEventsByProjectID($projectID));		break;	case "all":	default:		$totalNumEvents = count(Event::getByProjectID($projectID));		break;}$numPages = ceil($totalNumEvents/EVENTS_PER_PAGE); // get # pagesif( ($numPages != 0) && ($page > $numPages) ) {	// invalid page number	header('Location: '.Url::error());	exit();}// figure out which events to get$limit = ($page-1)*EVENTS_PER_PAGE.', '.EVENTS_PER_PAGE;switch($filter){	case "basics":		$events = Event::getBasicsEventsByProjectID($projectID, $limit);		break;	case "tasks":		$events = Event::getTasksEventsByProjectID($projectID, $limit);		break;	case "discussions":		$events = Event::getDiscussionsEventsByProjectID($projectID, $limit);		break;	case "people":		$events = Event::getPeopleEventsByProjectID($projectID, $limit);		break;	case "all":	default:		$events = Event::getByProjectID($projectID, null, $limit);		break;}$soup = new Soup();$soup->set('project', $project);$soup->set('filter', $filter);$soup->set('events', $events);//$soup->set('sparklineData', $sparklineData);$soup->set('page', $page);$soup->set('numPages', $numPages);//$soup->set('discussions', $discussions);$soup->render('project/page/activity');