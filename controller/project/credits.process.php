<?phprequire_once('./../../global.php');require_once TEMPLATE_PATH.'/site/helper/format.php'; // for formatCount// check project$slug = Filter::text($_GET['slug']);$project = Project::getProjectFromSlug($slug);if($project == null) {	$json = array('error' => 'That project does not exist.');	exit(json_encode($json));	}// get action so we know what to do$action = Filter::text($_POST['action']);// --- BAN USER --- //if($action == 'ban') {	// get user	$userID = Filter::numeric($_POST['userID']);	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// ban the user	$pu->setRelationship(ProjectUser::BANNED);	$pu->save();	// log it	$logEvent = new Event(array(		'event_type_id' => 'ban_user',		'project_id' => $project->getID(),		'user_1_id' => Session::getUserID(),		'user_2_id' => $userID	));	$logEvent->save();		// send notification email, if enabled	$u = User::load($userID);	if($u->getNotifyBannedProject()) {		// compose email		$body = "<p>".formatUserLink(Session::getUserID()).' banned you from the project '.formatProjectLink($project->getID()).'.</p>';					$email = array(			'to' => $u->getEmail(),			'subject' => '['.PIPELINE_NAME.'] Banned from the project '.$project->getTitle(),			'message' => $body		);		// send email		Email::send($email);			}			// send us back	$user = User::load($userID);	Session::setMessage($user->getUsername().' is now banned.');	$json = array('success' => '1');	echo json_encode($json);// --- UNBAN USER --- //		} elseif($action == 'unban') {	// get user	$userID = Filter::numeric($_POST['userID']);	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// delete the project user	$pu->delete();		// log it	$logEvent = new Event(array(		'event_type_id' => 'unban_user',		'project_id' => $project->getID(),		'user_1_id' => Session::getUserID(),		'user_2_id' => $userID	));	$logEvent->save();			// send notification email, if enabled	$u = User::load($userID);	if($u->getNotifyBannedProject()) {		// compose email		$body = "<p>".formatUserLink(Session::getUserID()).' unbanned you from the project '.formatProjectLink($project->getID()).'.</p>';					$email = array(			'to' => $u->getEmail(),			'subject' => '['.PIPELINE_NAME.'] Unbanned from the project '.$project->getTitle(),			'message' => $body		);		// send email		Email::send($email);			}				// send us back	$user = User::load($userID);	Session::setMessage($user->getUsername().' is no longer banned.');	$json = array('success' => '1');	echo json_encode($json);	// --- BAN USERS --- //	} elseif($action == 'ban-users') {	$banlist = Filter::text($_POST['banlist']);	$banlist = explode(',', $banlist);		// these arrays will hold valid users to ban	$users = array();		// first, make sure everyone in the list is valid	if(!empty($banlist)) {		foreach($banlist as $b) {			$b = trim($b);			if($b == '') continue; // skip blank			$user = User::loadByUsername($b);			if($user !== null) {				// user found				if($project->isBanned($user->getID())) {					// user is already banned					$json = array('error' => $user->getUsername().' is already banned from this project.');					exit(json_encode($json));				} else {					// add user to array					$users[] = $user;				}			} else {				// invalid user				$json = array('error' => '"'.$b.'" is not a valid username.');				exit(json_encode($json));								}		}	} else {		$json = array('error' => 'You must provide at least one username.');		exit(json_encode($json));			}		// now actually ban the validated users	foreach($users as $u) {			// get project user		$pu = ProjectUser::find($u->getID(), $project->getID());		// ban the user		$pu->setRelationship(ProjectUser::BANNED);		$pu->save();		// log it		$logEvent = new Event(array(			'event_type_id' => 'ban_user',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'user_2_id' => $u->getID()		));		$logEvent->save();			// send notification email, if enabled		if($u->getNotifyBannedProject()) {			// compose email			$body = "<p>".formatUserLink(Session::getUserID()).' banned you from the project '.formatProjectLink($project->getID()).'.</p>';						$email = array(				'to' => $u->getEmail(),				'subject' => '['.PIPELINE_NAME.'] Banned from the project '.$project->getTitle(),				'message' => $body			);			// send email			Email::send($email);				}	}		// send us back	$numBans = count($users);	Session::setMessage(formatCount($numBans,'user','users').' banned.');	$json = array('success' => '1');	echo json_encode($json);	// --- LEAVE --- //	} elseif($action == 'leave') {	// get user	$userID = Session::getUserID();	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// delete the project user	$pu->delete();		// log it	$logEvent = new Event(array(		'event_type_id' => 'leave_project',		'project_id' => $project->getID(),		'user_1_id' => $userID	));	$logEvent->save();			// send us back	Session::setMessage('You are no longer a member of this project.');	$json = array('success' => '1');	echo json_encode($json);		// --- JOIN --- //	} elseif($action == 'join') {	// get user	$userID = Session::getUserID();		// get project user	$pu = ProjectUser::find($userID, $project->getID());		if(empty($pu)) {		// new project user (already a follower)		$pu = new ProjectUser(array(			'user_id' => $userID,			'project_id' => $project->getID(),			'relationship' => ProjectUser::MEMBER		));	} else {		// edit existing project user		$pu->setRelationship(ProjectUser::MEMBER);	}	$pu->save();		// log it	$logEvent = new Event(array(		'event_type_id' => 'join_project',		'project_id' => $project->getID(),		'user_1_id' => $userID	));	$logEvent->save();		// send us back	Session::setMessage('You are now a member of this project.');	$json = array('success' => '1');	echo json_encode($json);// --- UNFOLLOW --- //	} elseif($action == 'unfollow') {	// get user	$userID = Session::getUserID();	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// delete the project user	$pu->delete();		// log it	$logEvent = new Event(array(		'event_type_id' => 'unfollow_project',		'project_id' => $project->getID(),		'user_1_id' => $userID	));	$logEvent->save();			// send us back	Session::setMessage('You are no longer following this project.');	$json = array('success' => '1');	echo json_encode($json);		// --- FOLLOW --- //	} elseif($action == 'follow') {	// get user	$userID = Session::getUserID();	// make follower	$pu = new ProjectUser(array(		'user_id' => $userID,		'project_id' => $project->getID(),		'relationship' => ProjectUser::FOLLOWER	));	$pu->save();		// log it	$logEvent = new Event(array(		'event_type_id' => 'follow_project',		'project_id' => $project->getID(),		'user_1_id' => $userID	));	$logEvent->save();		// send us back	Session::setMessage('You are now following this project.');	$json = array('success' => '1');	echo json_encode($json);			// --- TRUST MEMBER --- //	} elseif($action == 'trust') {	// get user	$userID = Filter::numeric($_POST['userID']);	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// trust the user	$pu->setRelationship(ProjectUser::TRUSTED);	$pu->save();	// log it	$logEvent = new Event(array(		'event_type_id' => 'trust_member',		'project_id' => $project->getID(),		'user_1_id' => Session::getUserID(),		'user_2_id' => $userID	));	$logEvent->save();		// send notification email, if enabled	$u = User::load($userID);	if($u->getNotifyTrustProject()) {		// compose email		$body = "<p>".formatUserLink(Session::getUserID()).' trusted you in the project '.formatProjectLink($project->getID()).'.</p>';					$email = array(			'to' => $u->getEmail(),			'subject' => '['.PIPELINE_NAME.'] Trusted in the project '.$project->getTitle(),			'message' => $body		);		// send email		Email::send($email);			}				// send us back	$user = User::load($userID);	Session::setMessage($user->getUsername().' is now trusted.');	$json = array('success' => '1');	echo json_encode($json);	// --- UNTRUST MEMBER --- //	} elseif($action == 'untrust') {	// get user	$userID = Filter::numeric($_POST['userID']);	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// untrust the user	$pu->setRelationship(ProjectUser::MEMBER);	$pu->save();	// log it	$logEvent = new Event(array(		'event_type_id' => 'untrust_member',		'project_id' => $project->getID(),		'user_1_id' => Session::getUserID(),		'user_2_id' => $userID	));	$logEvent->save();		// send notification email, if enabled	$u = User::load($userID);	if($u->getNotifyTrustProject()) {		// compose email		$body = "<p>".formatUserLink(Session::getUserID()).' untrusted you in the project '.formatProjectLink($project->getID()).'.</p>';					$email = array(			'to' => $u->getEmail(),			'subject' => '['.PIPELINE_NAME.'] Untrusted in the project '.$project->getTitle(),			'message' => $body		);		// send email		Email::send($email);			}			// send us back	$user = User::load($userID);	Session::setMessage($user->getUsername().' is no longer trusted.');	$json = array('success' => '1');	echo json_encode($json);	// --- INVITE MEMBERS --- //	} elseif($action == 'invite-members') {	$invitees = Filter::text($_POST['invitees']);	$message = Filter::formattedText($_POST['message']);	$trusted = Filter::numeric($_POST['trusted']);	$invitees = explode(',', $invitees);		// these arrays will hold valid users and emails to invite	$users = array();	$emails = array();		// first, make sure everyone in the list is valid	if(!empty($invitees)) {		foreach($invitees as $i) {			$i = trim($i);			if($i == '') continue; // skip blank			if(filter_var($i, FILTER_VALIDATE_EMAIL)) {				// it's an email address				$user = User::loadByEmail($i);				if($user !== null) {					// user already registered with this email					if($project->isCreator($user->getID())) {						$json = array('error' => $user->getUsername().' ('.$i.') is the creator of this project.');						exit(json_encode($json));											} elseif($project->isTrusted($user->getID())) {						$json = array('error' => $user->getUsername().' ('.$i.') is already a trusted member of this project.');						exit(json_encode($json));							} elseif($project->isMember($user->getID())) {						$json = array('error' => $user->getUsername().' ('.$i.') is already a member of this project.');						exit(json_encode($json));											} else {						// add user to array						$users[] = $user;					}								} else {					// email address not found					$emails[] = $i;				}			} else {				// it's a username				$user = User::loadByUsername($i);				if($user !== null) {					// user found					if($project->isCreator($user->getID())) {						$json = array('error' => $user->getUsername().' ('.$i.') is the creator of this project.');						exit(json_encode($json));											} elseif($project->isTrusted($user->getID())) {						$json = array('error' => $user->getUsername().' ('.$i.') is already a trusted member of this project.');						exit(json_encode($json));							} elseif($project->isMember($user->getID())) {						$json = array('error' => $user->getUsername().' ('.$i.') is already a member of this project.');						exit(json_encode($json));						} else {						// add user to array						$users[] = $user;					}				} else {					// invalid user					$json = array('error' => '"'.$i.'" is not a valid username or email address.');					exit(json_encode($json));									}			}		}	} else {		$json = array('error' => 'You must provide at least one username or email address.');		exit(json_encode($json));			}		// now actually invite the validated users/emails	foreach($users as $u) {		// send invitation		$invite = new Invitation(array(			'inviter_id' => Session::getUserID(),			'invitee_id' => $u->getID(),			'project_id' => $project->getID(),			'trusted' => $trusted,			'invitation_message' => $message		));		$invite->save();				// log event		$logEvent = new Event(array(			'event_type_id' => 'invite_member_user',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'user_2_id' => $u->getID(),			'item_1_id' => $invite->getID(),			'data_1' => $message,			'data_2' => $trusted		));		$logEvent->save();				// send notification email, if enabled		$sendEmail = false;		if($u->getID() != Session::getUserID()) { // don't email yourself					if($u->getNotifyInviteProject()) { // follower member enabled				$sendEmail = true;			}		}				if($sendEmail) {			// compose email			$body = "<p>".formatUserLink(Session::getUserID()).' invited you to join the project '.formatProjectLink($project->getID()).'.</p>';			if(!empty($message)) {				$body .= '<blockquote>'.formatInvitationMessage($message).'</blockquote>';			}			if($trusted) {				$body .= '<p>If you accept this invitation, you will become a <a href="'.Url::help().'">trusted member</a> of this project.</p>';			}						$body .= '<p>To respond to this invitation, log into '.PIPELINE_NAME.' and visit your <a href="'.Url::dashboard().'">dashboard</a>.</p>';			$email = array(				'to' => $u->getEmail(),				'subject' => '['.PIPELINE_NAME.'] Invitation to join the project '.$project->getTitle(),				'message' => $body			);			// send email			Email::send($email);				}	}		foreach($emails as $e) {		// generate code//		$code = sha1(microtime(true).mt_rand(10000,90000));		// send invitation		$invite = new Invitation(array(			'inviter_id' => Session::getUserID(),			'invitee_email' => $e,			'project_id' => $project->getID(),						'trusted' => $trusted,			'invitation_message' => $message		));		$invite->save();				// log event		$logEvent = new Event(array(			'event_type_id' => 'invite_member_email',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'item_1_id' => $invite->getID(),			'data_1' => $e,			'data_2' => $message,			'data_3' => $trusted		));		$logEvent->save();						// compose email		$body = "<p>".formatUserLink(Session::getUserID()).' invited you to join the project '.formatProjectLink($project->getID()).'.</p>';		if(!empty($message)) {			$body .= '<blockquote>'.formatInvitationMessage($message).'</blockquote>';		}		if($trusted) {			$body .= '<p>If you accept this invitation, you will become a <a href="'.Url::help().'">trusted member</a> of this project.</p>';		}				$body .= '<p>To respond to this invitation, <a href="'.Url::consent($e).'">register</a> a free account on '.PIPELINE_NAME.' using this email address ('.$e.').</p>';		$email = array(			'to' => $e,			'subject' => '['.PIPELINE_NAME.'] Invitation to join the project '.$project->getTitle(),			'message' => $body		);		// send email		Email::send($email);	}		// send us back	$numInvitations = count($users) + count($emails);	Session::setMessage(formatCount($numInvitations,'invitation','invitations').' sent.');	$json = array('success' => '1');	echo json_encode($json);		} else {	$json = array('error' => 'Invalid action.');	exit(json_encode($json));	}