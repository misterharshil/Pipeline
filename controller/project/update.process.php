<?phprequire_once("../../global.php");require_once TEMPLATE_PATH.'/site/helper/format.php';// check project$slug = Filter::text($_GET['slug']);$project = Project::getProjectFromSlug($slug);if($project == null) {	$json = array('error' => 'That project does not exist.');	exit(json_encode($json));	}// validate task$taskID = Filter::numeric($_GET['t']);$task = Task::load($taskID);if($task == null) {	$json = array('error' => 'That task does not exist.');	exit(json_encode($json));	}// // validate username// $username = Filter::text($_GET['u']);// $user = User::loadByUsername($username);// // check if user has accepted task// $accepted = Accepted::getByUserID($user->getID(), $task->getID());// if($accepted == null) {	// $json = array('error' => 'That user has not accepted this task.');	// exit(json_encode($json));	// }// move onto POST variables$action = Filter::text($_POST['action']);if($action == 'create') {	// get update content	$title = Filter::text($_POST['txtTitle']);	$message = Filter::formattedText($_POST['txtMessage']);	$status = Filter::numeric($_POST['selStatus']);		// title can't be empty	if($title == '') {		$json = array('error' => 'Your update title cannot be empty.');		exit(json_encode($json));		}		// update can't be empty	if($message == '') {		$json = array('error' => 'Your update message cannot be empty.');		exit(json_encode($json));		}		// get acceptedID	$accepted = Accepted::getByUserID(Session::getUserID(), $task->getID());		// update status	$accepted->setStatus($status);	$accepted->save();		// create the update	$update = new Update(array(		'creator_id' => Session::getUserID(),		'accepted_id' => $accepted->getID(),		'project_id' => $project->getID(),		'title' => $title,		'message' => $message	));	$update->save();		// save uploaded files to database	foreach($_POST['file'] as $stored => $orig) {		$stored = Filter::text($stored);		$orig = Filter::text($orig);		Upload::saveToDatabase(			$orig,			$stored,			Upload::TYPE_UPDATE,			$update->getID(),			$project->getID()			);	}		// log it	$logEvent = new Event(array(		'event_type_id' => 'create_update',		'user_1_id' => Session::getUserID(),		'project_id' => $project->getID(),		'item_1_id' => $update->getID(),		'item_2_id' => $accepted->getID(),		'item_3_id' => $task->getID(),		'data_1' => $update->getTitle(),		'data_2' => $update->getMessage()	));	$logEvent->save();		// we're done here	Session::setMessage('You created a new update for this task.');	$json = array('success' => '1', 'successUrl' => Url::update($update->getID()));	echo json_encode($json);	} elseif($action == 'edit-update') {	// validate update	$updateID = Filter::numeric($_GET['u']);	$update = Update::load($updateID);	if($update == null) {		header('Location: '.Url::error());		exit();	}	// get update content	$title = Filter::text($_POST['txtTitle']);	$message = Filter::formattedText($_POST['txtMessage']);	$status = Filter::numeric($_POST['selStatus']);	$deleted = $_POST['deleted']; // deleted files	$added = $_POST['file']; // added files		// title can't be empty	if($title == '') {		$json = array('error' => 'Your update title cannot be empty.');		exit(json_encode($json));		}		// message can't be empty	if($message == '') {		$json = array('error' => 'Your update message cannot be empty.');		exit(json_encode($json));		}		// flag default is false; assume nothing is modified to start	$modified = false;	// get acceptedID	$accepted = Accepted::load($update->getAcceptedID());	// is title modified?	if($title != $update->getTitle()) {		// save changes		$oldTitle = $update->getTitle();		$update->setTitle($title);		$update->save();		// log it		$logEvent = new Event(array(			'event_type_id' => 'edit_update_title',			'user_1_id' => Session::getUserID(),			'project_id' => $project->getID(),			'item_1_id' => $update->getID(),			'item_2_id' => $accepted->getID(),			'item_3_id' => $task->getID(),			'data_1' => $oldTitle,			'data_2' => $title		));		$logEvent->save();			// set flag		$modified = true;	}		// is message modified?	if($message != $update->getMessage()) {		// save changes		$oldMessage = $update->getMessage();		$update->setMessage($message);		$update->save();		// log it		$logEvent = new Event(array(			'event_type_id' => 'edit_update_message',			'user_1_id' => Session::getUserID(),			'project_id' => $project->getID(),			'item_1_id' => $update->getID(),			'item_2_id' => $accepted->getID(),			'item_3_id' => $task->getID(),			'data_1' => $oldMessage,			'data_2' => $message		));		$logEvent->save();			// set flag		$modified = true;	}		// is status modified?	if($status != null) {		if($status != $accepted->getStatus()) {			// save changes			$oldStatus = $accepted->getStatus();			$accepted->setStatus($status);			$accepted->save();			// log it			$logEvent = new Event(array(				'event_type_id' => 'edit_accepted_status',				'user_1_id' => Session::getUserID(),				'project_id' => $project->getID(),				'item_1_id' => $update->getID(),				'item_2_id' => $accepted->getID(),				'item_3_id' => $task->getID(),				'data_1' => $oldStatus,				'data_2' => $status						));			$logEvent->save();			// set flag			$modified = true;		}	}		// are uploads deleted?	if(!empty($deleted)) {		$deletedIDs = '';		foreach($deleted as $d) {			// save changes			$d = Filter::numeric($d);			$upload = Upload::load($d);			$upload->setDeleted(true);			$upload->save();			$deletedIDs .= $d.',';		}	}		// are uploads added?	if(!empty($added)) {		$addedIDs = '';		foreach($added as $stored => $orig) {			// save changes			$stored = Filter::text($stored);			$orig = Filter::text($orig);			$uploadID = Upload::saveToDatabase(				$orig,				$stored,				Upload::TYPE_UPDATE,				$update->getID(),				$project->getID()				);			$addedIDs .= $uploadID.',';		}	}		// deal with logging and modified flag for both adds and deletes	if(!empty($deletedIDs) || !empty($addedIDs)) {		// log it		$logEvent = new Event(array(			'event_type_id' => 'edit_update_uploads',			'user_1_id' => Session::getUserID(),			'project_id' => $project->getID(),			'item_1_id' => $update->getID(),			'item_2_id' => $accepted->getID(),			'item_3_id' => $task->getID(),			'data_1' => $deletedIDs,			'data_2' => $addedIDs		));		$logEvent->save();		// set flag		$modified = true;		}		// check flag	if($modified) {		Session::setMessage('You edited the update.');		$json = array('success' => '1');		echo json_encode($json);			} else {		$json = array('error' => 'No changes were detected.');		exit(json_encode($json));		}// } elseif($action == 'edit-status') {	// // get new status	// $status = Filter::numeric($_POST['status']);	// // check if status is new	// $oldStatus = $accepted->getStatus();	// if($status != $oldStatus) {		// // update status		// $accepted->setStatus($status);		// $accepted->save();		// // log it		// $logEvent = new Event(array(			// 'event_type_id' => 'edit_accepted_status',			// 'user_1_id' => Session::getUserID(),			// 'project_id' => $project->getID(),			// 'item_1_id' => $accepted->getID(),			// 'item_2_id' => $task->getID(),			// 'data_1' => $oldStatus,			// 'data_2' => $status		// ));		// $logEvent->save();		// // send us back		// Session::setMessage('You edited the status for these updates.');		// $json = array('success' => '1');		// echo json_encode($json);			// } else {		// $json = array('error' => 'No changes were detected.');		// exit(json_encode($json));			// }} elseif($action == 'comment') {	// validate update	$updateID = Filter::numeric($_GET['u']);	$update = Update::load($updateID);	if($update == null) {		header('Location: '.Url::error());		exit();	}	// validate message	$message = Filter::formattedText($_POST['message']);	if($message == '') {		$json = array('error' => 'Your comment cannot be empty.');		exit(json_encode($json));			} else {		// post the comment		$comment = new Comment(array(			'creator_id' => Session::getUserID(),			'project_id' => $project->getID(),			'update_id' => $updateID,			'message' => $message		));		$comment->save();		// re-save now that we have an ID		$comment->setParentID($comment->getID());		$comment->save();						// log it		$logEvent = new Event(array(			'event_type_id' => 'create_update_comment',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'item_1_id' => $comment->getID(),			'item_2_id' => $updateID,			'data_1' => $message		));		$logEvent->save();				// send email notification, if desired		$creator = User::load($update->getCreatorID());		if($creator->getID() != Session::getUserID()) { // don't email yourself			if($creator->getNotifyCommentTaskUpdate()) {				// compose email				$body = "<p>".formatUserLink(Session::getUserID()).' commented on your task update <a href="'.Url::update($updateID).'">'.$update->getTitle().'</a> in the project '.formatProjectLink($project->getID()).'. The comment was:</p>';				$body .= "<blockquote>".formatUpdate($message)."</blockquote>";				$email = array(					'to' => $creator->getEmail(),					'subject' => '['.PIPELINE_NAME.'] New comment on your task update in '.$project->getTitle(),					'message' => $body				);				// send email				Email::send($email);				}				}						// send us back		Session::setMessage('You commented on this update.');		$json = array('success' => '1');		echo json_encode($json);	}} elseif($action == 'comment-reply') {	// validate update	$updateID = Filter::numeric($_GET['u']);	$update = Update::load($updateID);	if($update == null) {		header('Location: '.Url::error());		exit();	}	$commentID = Filter::numeric($_POST['commentID']);	$message = Filter::formattedText($_POST['message']);	if($message == '') {		$json = array('error' => 'Your reply cannot be empty.');		exit(json_encode($json));			} else {		// post the comment		$reply = new Comment(array(			'creator_id' => Session::getUserID(),			'project_id' => $project->getID(),			'update_id' => $updateID,			'parent_id' => $commentID,			'message' => $message		));		$reply->save();						// log it		$logEvent = new Event(array(			'event_type_id' => 'create_update_comment_reply',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'item_1_id' => $commentID,			'item_2_id' => $reply->getID(),			'item_3_id' => $updateID,			'data_1' => $message		));		$logEvent->save();				// send email notification, if desired		$creator = User::load($update->getCreatorID());		if($creator->getID() != Session::getUserID()) { // don't email yourself			if($creator->getNotifyCommentTaskUpdate()) {				// compose email				$msg = "<p>".formatUserLink(Session::getUserID()).' replied to a comment on your task update <a href="'.Url::update($updateID).'">'.$update->getTitle().'</a> in the project '.formatProjectLink($project->getID()).'. The reply was:</p>';				$msg .= "<blockquote>".formatUpdate($message)."</blockquote>";				$email = array(					'to' => $creator->getEmail(),					'subject' => '['.PIPELINE_NAME.'] New comment reply on your task update in '.$project->getTitle(),					'message' => $msg				);				// send email				Email::send($email);				}				}				// send us back		Session::setMessage('You replied to a comment on this update.');		$json = array('success' => '1');		echo json_encode($json);	}	} else {	$json = array('error' => 'Action not recognized.');	exit(json_encode($json));	}