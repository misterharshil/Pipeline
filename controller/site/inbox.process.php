<?phprequire_once("../../global.php");require_once TEMPLATE_PATH.'/site/helper/format.php';$action = Filter::text($_POST['action']);if($action == 'send') {	$recipientUsername = Filter::text($_POST['recipient']);	$subject = Filter::text($_POST['subject']);	$body = Filter::formattedText($_POST['body']);		// can't send message to self	if($recipientUsername == Session::getUsername()) {		$json = array( 'error' => 'You cannot send a message to yourself.' );		exit(json_encode($json));		}		// recipient must be valid	$recipient = User::loadByUsername($recipientUsername);	if(empty($recipient)) {		$json = array( 'error' => 'That recipient is not a valid user.' );		exit(json_encode($json));		}		// subject can't be empty	if(empty($subject)) {		$json = array( 'error' => 'You must provide a message subject.' );		exit(json_encode($json));		}		// body can't be empty	if(empty($body)) {		$json = array( 'error' => 'You must provide a message body.' );		exit(json_encode($json));		}			// create the message	$message = new Message(array(		'sender_id' => Session::getUserID(),		'recipient_id' => $recipient->getID(),		'subject' => $subject,		'body' => $body,		'date_sent' => date("Y-m-d H:i:s")	));	$message->save();	// save the parent ID	$message->setParentID($message->getID());	$message->save();		// log it	$logEvent = new Event(array(		'event_type_id' => 'send_message',		'user_1_id' => Session::getUserID(),		'user_2_id' => $recipient->getID(),		'item_1_id' => $message->getID(),		'data_1' => $subject,		'data_2' => $body	));	$logEvent->save();		// send email notification, if desired	if($recipient->getNotifyReceiveMessage()) {		// compose email		$emailbody = "<p>".formatUserLink(Session::getUserID()).' sent you a message on '.PIPELINE_NAME.':</p>';		$emailbody .= "<blockquote>Subject: ".$subject."</blockquote>";		$emailbody .= "<blockquote>Body: ".formatInboxMessage($body)."</blockquote>";		$emailbody .= '<p><a href="'.Url::message($message->getID()).'">Click here</a> to log in and reply to this message.</p>';		$email = array(			'to' => $recipient->getEmail(),			'subject' => '['.PIPELINE_NAME.'] New message from '.Session::getUsername(),			'message' => $emailbody		);		// send email		Email::send($email);		}				// send us back	Session::setMessage("Your message was sent.");		$json = array(		'success' => '1',		'successUrl' => Url::inbox()	);	echo json_encode($json);	} elseif($action == 'reply') {	$messageID = Filter::numeric($_POST['messageID']);	$body = Filter::formattedText($_POST['body']);		if(empty($body)) {		$json = array( 'error' => 'Your message can not be blank.' );		exit(json_encode($json));		}		$message = Message::load($messageID);	// figure out who reply is going to	if(Session::getUserID() == $message->getSenderID()) {		$recipientID = $message->getRecipientID();	} else {		$recipientID = $message->getSenderID();	}	$subject = $message->getSubject();		// send the message	$reply = new Message(array(		'sender_id' => Session::getUserID(),		'recipient_id' => $recipientID,		'parent_id' => $message->getID(),		'subject' => $subject,		'body' => $body,		'date_sent' => date("Y-m-d H:i:s")	));	$reply->save();			// log it	$logEvent = new Event(array(		'event_type_id' => 'send_message',		'user_1_id' => Session::getUserID(),		'user_2_id' => $recipientID,		'item_1_id' => $reply->getID(),		'data_1' => $subject,		'data_2' => $body	));	$logEvent->save();		// send email notification, if desired	$recipient = User::load($recipientID);	if($recipient->getNotifyReceiveMessage()) {		// compose email		$emailbody = "<p>".formatUserLink(Session::getUserID()).' sent you a message on '.PIPELINE_NAME.':</p>';		$emailbody .= "<blockquote>Subject: ".$subject."</blockquote>";		$emailbody .= "<blockquote>Body: ".formatInboxMessage($body)."</blockquote>";		$emailbody .= '<p><a href="'.Url::message($reply->getID()).'">Click here</a> to log in and reply to this message.</p>';		$email = array(			'to' => $recipient->getEmail(),			'subject' => '['.PIPELINE_NAME.'] New message from '.Session::getUsername(),			'message' => $emailbody		);		// send email		Email::send($email);		}					$json = array( 'success' => '1' );	Session::setMessage("You replied to this message.");	echo json_encode($json);} else {	$json = array( 'error' => 'Invalid action.' );	exit(json_encode($json));}